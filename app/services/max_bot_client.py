import aiohttp
import json
from typing import Optional, List, Dict, Any
from datetime import datetime
import os

from app.core.config import settings


class MaxBotClient:
    def __init__(self, bot_token: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ú–ê–ö–° –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        self.bot_token = bot_token or os.getenv("MAX_BOT_TOKEN")
        if not self.bot_token:
            raise ValueError("Bot token is required. Set MAX_BOT_TOKEN environment variable or pass it to constructor.")
        
        self.base_url = "https://botapi.max.ru"
        self.session: Optional[aiohttp.ClientSession] = None
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ú–ê–ö–°
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE, PATCH)
            endpoint: –≠–Ω–¥–ø–æ–∏–Ω—Ç API
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è POST, PUT, PATCH)
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        session = await self._get_session()
        url = f"{self.base_url}{endpoint}?access_token={self.bot_token}"
        
        try:
            if method.upper() == "GET":
                async with session.get(url) as response:
                    return await response.json()
            elif method.upper() == "POST":
                async with session.post(url, json=data) as response:
                    return await response.json()
            elif method.upper() == "PUT":
                async with session.put(url, json=data) as response:
                    return await response.json()
            elif method.upper() == "DELETE":
                async with session.delete(url) as response:
                    return await response.json()
            elif method.upper() == "PATCH":
                async with session.patch(url, json=data) as response:
                    return await response.json()
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")
        
        except aiohttp.ClientError as e:
            print(f"Error making request to MAX API: {e}")
            return {"error": str(e)}
    
    async def get_bot_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –±–æ—Ç–µ"""
        return await self._make_request("GET", "/bots")
    
    async def update_bot_info(self, name: Optional[str] = None, description: Optional[str] = None) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        data = {}
        if name:
            data["name"] = name
        if description:
            data["description"] = description
        
        return await self._make_request("PATCH", "/bots", data)
    
    async def send_message(self, chat_id: str, text: str, format_type: str = "markdown") -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            format_type: –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ (markdown –∏–ª–∏ html)
        """
        data = {
            "chat_id": chat_id,
            "body": {
                "text": text,
                "format": format_type
            }
        }
        
        return await self._make_request("POST", "/messages", data)
    
    async def send_message_to_user(self, user_id: str, text: str, format_type: str = "markdown") -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            format_type: –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ (markdown –∏–ª–∏ html)
        """
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        chat_data = {
            "user_id": user_id
        }
        chat_response = await self._make_request("POST", "/chats", chat_data)
        
        if "error" in chat_response:
            return chat_response
        
        chat_id = chat_response.get("chat_id")
        if not chat_id:
            return {"error": "Failed to create chat"}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
        return await self.send_message(chat_id, text, format_type)
    
    async def send_damage_notification(self, student_name: str, textbook_title: str, damage_type: str, is_during_check_period: bool) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏ —É—á–µ–±–Ω–∏–∫–∞"""
        message = f"**–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–∞**\n\n"
        message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
        message += f"üìö –£—á–µ–±–Ω–∏–∫: {textbook_title}\n"
        message += f"üîß –¢–∏–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: {damage_type}\n"
        
        if is_during_check_period:
            message += f"‚úÖ –°–æ–æ–±—â–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏"
        else:
            message += f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å chat_id —É—á–∏—Ç–µ–ª—è)
        teacher_chat_id = os.getenv("TEACHER_CHAT_ID")
        if teacher_chat_id:
            return await self.send_message(teacher_chat_id, message)
        else:
            print(f"Damage notification: {message}")
            return {"message": "Notification logged (teacher chat not configured)"}
    
    async def send_lost_notification(self, student_name: str, textbook_title: str, parent_phone: str) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ç–µ—Ä–µ —É—á–µ–±–Ω–∏–∫–∞"""
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
        teacher_message = f"**–£—Ç–µ—Ä—è —É—á–µ–±–Ω–∏–∫–∞**\n\n"
        teacher_message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
        teacher_message += f"üìö –£—á–µ–±–Ω–∏–∫: {textbook_title}\n"
        teacher_message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è: {parent_phone}"
        
        teacher_chat_id = os.getenv("TEACHER_CHAT_ID")
        if teacher_chat_id:
            await self.send_message(teacher_chat_id, teacher_message)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å max_user_id)
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        print(f"Lost notification to {parent_phone}: {teacher_message}")
        return {"message": "Lost notification sent"}
    
    async def send_found_notification(self, finder_name: str, textbook_title: str, found_location: str) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ö–æ–¥–∫–µ —É—á–µ–±–Ω–∏–∫–∞"""
        message = f"**–ù–∞–π–¥–µ–Ω —É—á–µ–±–Ω–∏–∫**\n\n"
        message += f"üë§ –ù–∞—à–µ–¥—à–∏–π: {finder_name}\n"
        message += f"üìö –£—á–µ–±–Ω–∏–∫: {textbook_title}\n"
        message += f"üìç –ú–µ—Å—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏: {found_location}"
        
        teacher_chat_id = os.getenv("TEACHER_CHAT_ID")
        if teacher_chat_id:
            return await self.send_message(teacher_chat_id, message)
        else:
            print(f"Found notification: {message}")
            return {"message": "Found notification logged"}
    
    async def send_parent_notification(self, parent_phone: str, student_name: str, message_type: str, **kwargs) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        if message_type == "issue":
            message = f"**–í—ã–¥–∞—á–∞ —É—á–µ–±–Ω–∏–∫–æ–≤**\n\n"
            message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
            message += f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {kwargs.get('total_count', 0)} —É—á–µ–±–Ω–∏–∫–æ–≤\n\n"
            message += f"**–°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω–∏–∫–æ–≤:**\n{kwargs.get('textbook_list', '')}"
        
        elif message_type == "return":
            message = f"**–í–æ–∑–≤—Ä–∞—Ç —É—á–µ–±–Ω–∏–∫–æ–≤**\n\n"
            message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
            message += f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {kwargs.get('total_count', 0)} —É—á–µ–±–Ω–∏–∫–æ–≤\n\n"
            message += f"**–°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω–∏–∫–æ–≤:**\n{kwargs.get('textbook_list', '')}"
        
        elif message_type == "lost":
            message = f"**–£—Ç–µ—Ä—è —É—á–µ–±–Ω–∏–∫–∞**\n\n"
            message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
            message += f"üìö –£—á–µ–±–Ω–∏–∫: {kwargs.get('textbook_name', '')}\n"
            message += f"üìÖ –î–∞—Ç–∞: {kwargs.get('lost_date', '')}\n\n"
            message += f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏ —É—á–µ–±–Ω–∏–∫"
        
        elif message_type == "found":
            message = f"**–ù–∞–π–¥–µ–Ω —É—á–µ–±–Ω–∏–∫**\n\n"
            message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
            message += f"üìö –£—á–µ–±–Ω–∏–∫: {kwargs.get('textbook_name', '')}\n"
            message += f"üë• –ù–∞—à–µ–¥—à–∏–π: {kwargs.get('finder_name', '')}\n\n"
            message += f"‚úÖ –£—á–µ–±–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –∏ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω"
        
        elif message_type == "bulk_issue_summary":
            message = f"**–ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ —É—á–µ–±–Ω–∏–∫–æ–≤**\n\n"
            message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
            message += f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {kwargs.get('total_count', 0)} —É—á–µ–±–Ω–∏–∫–æ–≤\n\n"
            message += f"**–°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω–∏–∫–æ–≤:**\n{kwargs.get('textbook_list', '')}"
        
        elif message_type == "return_reminder":
            message = f"**–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ**\n\n"
            message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
            message += f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {kwargs.get('total_count', 0)} —É—á–µ–±–Ω–∏–∫–æ–≤\n\n"
            message += f"**–°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω–∏–∫–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:**\n{kwargs.get('textbook_list', '')}\n\n"
            message += f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–æ–º–Ω–∏—Ç–µ —Ä–µ–±–µ–Ω–∫—É —Å–¥–∞—Ç—å —É—á–µ–±–Ω–∏–∫–∏"
        
        elif message_type == "damage_check_reminder":
            message = f"**–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—á–µ–±–Ω–∏–∫–æ–≤**\n\n"
            message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
            message += f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {kwargs.get('textbook_count', 0)} —É—á–µ–±–Ω–∏–∫–æ–≤\n\n"
            message += f"‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {kwargs.get('deadline_days', 7)} –¥–Ω–µ–π"
        
        else:
            message = f"**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n"
            message += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
            message += f"üìù –¢–∏–ø: {message_type}"
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–æ–¥–∏—Ç–µ–ª—è–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        print(f"Parent notification to {parent_phone}: {message}")
        return {"message": f"Parent notification logged for {parent_phone}"}
    
    async def get_chat_info(self, chat_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
        return await self._make_request("GET", f"/chats/{chat_id}")
    
    async def get_chat_members(self, chat_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        return await self._make_request("GET", f"/chats/{chat_id}/members")
    
    async def add_chat_member(self, chat_id: str, user_id: str) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç"""
        data = {"user_id": user_id}
        return await self._make_request("POST", f"/chats/{chat_id}/members", data)
    
    async def remove_chat_member(self, chat_id: str, user_id: str) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–∞"""
        return await self._make_request("DELETE", f"/chats/{chat_id}/members/{user_id}")
    
    async def get_messages(self, chat_id: str, limit: int = 50, offset: int = 0) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞"""
        return await self._make_request("GET", f"/messages?chat_id={chat_id}&limit={limit}&offset={offset}")
    
    async def edit_message(self, message_id: str, text: str, format_type: str = "markdown") -> Dict[str, Any]:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        data = {
            "body": {
                "text": text,
                "format": format_type
            }
        }
        return await self._make_request("PUT", f"/messages/{message_id}", data)
    
    async def delete_message(self, message_id: str) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return await self._make_request("DELETE", f"/messages/{message_id}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()
    
    async def __aenter__(self):
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close() 